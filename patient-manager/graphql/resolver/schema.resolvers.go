package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"patient-manager/graphql/generated"
	"patient-manager/graphql/model"
)

// CreatePatient is the resolver for the createPatient field.
func (r *mutationResolver) CreatePatient(ctx context.Context, firstname string, lastname string, middlename *string, dateofbirth string, gender string) (*model.Patient, error) {
	patient := model.Patient{
		Firstname:   firstname,
		Lastname:    lastname,
		Middlename:  middlename,
		Dateofbirth: dateofbirth,
		Gender:      gender,
	}
	_, err := db.PatientCollection.InsertOne(ctx, patient)
	if err != nil {
		return nil, err
	}
	return &patient, nil
}

// Patients is the resolver for the patients field.
func (r *queryResolver) Patients(ctx context.Context) ([]*model.Patient, error) {
	cursor, err := db.PatientCollection.Find(ctx, bson.M{})
	if err != nil {
		return nil, err
	}
	var patients []*model.Patient
	if err = cursor.All(ctx, &patients); err != nil {
		return nil, err
	}
	return patients, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
